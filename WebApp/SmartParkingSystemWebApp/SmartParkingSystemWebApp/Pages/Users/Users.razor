@page "/Users"
@inject HttpClient Http
@inject IToastService toastService
@implements IDisposable

<h1 aria-label="kullanıcılar">KULLANICILAR</h1>

<button class="btn btn-primary" @onclick="() => Update(user, true)">Yeni Kullanıcı Ekle</button>
<br />
<br />

<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th aria-label="Kullanıcı Adı">Kullanıcı Adı</th>
            <th aria-label="Ad">Ad</th>
            <th aria-label="Soyad">Soyad</th>
            <th aria-label="Güncelle">Güncelle</th>
            <th aria-label="Sil">Sil</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var usr in UserList)
        {
            <tr>
                <td aria-label="@usr.Username">@usr.Username</td>
                <td aria-label="@usr.Name">@usr.Name</td>
                <td aria-label="@usr.Surname">@usr.Surname</td>
                <td><button class="btn btn-primary" aria-label="Güncelle" @onclick="() => Update(usr, false)">Güncelle</button></td>
                <td><button class="btn btn-danger" aria-label="Sil" @onclick="() => Delete(usr.Id)">Sil</button></td>
            </tr>
        }
    </tbody>
</table>
<br />
<hr />






@code {
    private List<User>
    UserList = new List<User>();
    [CascadingParameter] public IModalService Modal { get; set; }

    private User user = new User();
    public HubConnection connection { get; set; }


    //[CascadingParameter] public IModalService Modal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<List<User>>("api/User/AllUsers");
        UserList = result.ToList();

        connection = new HubConnectionBuilder().WithUrl("http://localhost:61818/parksishub").Build();
        connection.On<List<User>>("recieveMessageUser", (message) =>
        {
            UserList = message;

            StateHasChanged();
        });
        await connection.StartAsync();

    }

    public void Dispose()
    {
        connection.StopAsync();
    }


    public async Task AddUser()
    {
        var result = await Http.PostAsJsonAsync("api/User/Add", user);

        if (result.IsSuccessStatusCode)
        {
            var result2 = await Http.GetFromJsonAsync<List<User>>("api/User/AllUsers");
            UserList = result2.ToList();
            user = new User();

            toastService.ShowSuccess("Kaydedildi.", "BAŞARILI");
        }
        else
        {
            toastService.ShowError(" Kullanıcı zaten mevcut!", "HATA");
        }
    }

    public async Task Delete(Guid id)
    {
        var result = await Http.DeleteAsync("api/User/" + id);
        if (result.IsSuccessStatusCode)
        {
            UserList.Remove(UserList.FirstOrDefault(x => x.Id == id));
            toastService.ShowSuccess("Kayıt başarıyla silindi.", "BAŞARILI");

        }
        else
        {
            toastService.ShowError("Kayıt silinemedi.", "HATA");
        }

    }

    public async Task Update(User user, bool isNew)
    {
        var title = "Kullanıcı Güncelle";
        if (isNew)
        {
            user = new User();
            title = "Yeni Kullanıcı Ekle";
        }
        var parameters = new ModalParameters();
        parameters.Add("user", user);
        Modal.Show<UserForm>(title, parameters);


        //var result = await Http.GetFromJsonAsync<List<Config>>("api/Config/AllConfigs");
        //ConfigList = result.ToList();
        //Config = new Config();
    }
}
