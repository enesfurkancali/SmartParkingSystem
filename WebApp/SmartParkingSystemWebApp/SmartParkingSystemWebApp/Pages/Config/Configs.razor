@page "/Configs"
@inject HttpClient Http
@inject IToastService toastService
<h1 aria-label="Tarife">Tarife</h1>

@*<button class="btn btn-dark" @onclick="@show">yeni ekle</button>
    <br />*@

<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th aria-label="Süre">Süre</th>
            <th aria-label="Ücret">Ücret</th>
            <th aria-label="Güncelle">Güncelle</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var c in ConfigList)
        {
            <tr>
                <td aria-label="@c.Name">@c.Name</td>
                <td aria-label="@c.Value">@c.Value</td>
                <td><button class="btn btn-primary" aria-label="Güncelle" @onclick="() => Config=c">Güncelle</button></td>
            </tr>
        }
    </tbody>
</table>
<br />
<hr />


<!--<div class="container-fluid h-100 " id="kullaniciEkle">
    <div class="row justify-content-start align-items-baseline h-100">
        <div class="col col-sm-6 col-lg-4 col-xl-3">-->
            @*<img src="images/recycle-bin.png" />*@


            <!--<EditForm Model="@Config" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />


                <h5 aria-label="Yeni Ayar ekle">Yeni ayar ekle</h5>

                <div class="form-group">
                    <input @bind="Config.Name" class="form-control form-control-" type="text" placeholder="Name" />
                </div>


                <div class="form-group">
                    <input @bind="Config.Value" class="form-control form-control" type="number" placeholder="Value" />
                </div>           



                <div class="form-group">
                    <button class="btn btn-dark btn-block" aria-label="ekle" type="submit">Gönder</button>
                </div>

            </EditForm>
        </div>
    </div>

</div>-->



@code {
    private List<Config>
    ConfigList = new List<Config>();

    private Config Config = new Config();

    //[CascadingParameter] public IModalService Modal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<List<Config>>("api/Config/AllConfigs");
        ConfigList = result.ToList();



    }

    public async Task AddConfig()
    {
        var result = await Http.PostAsJsonAsync("api/Config/Add", Config);

        if (result.IsSuccessStatusCode)
        {
            var result2 = await Http.GetFromJsonAsync<List<Config>>("api/Config/AllConfigs");
            ConfigList = result2.ToList();
            Config = new Config();

            toastService.ShowSuccess("Kaydedildi.", "BAŞARILI");
        }
        else
        {
            toastService.ShowError(" Ayar zaten mevcut!", "HATA");
        }
    }

    public void Fill(Config config)
    {

    }
    public void HandleValidSubmit()
    {
        if (ConfigList.Contains(Config))
            Update();
        else
            AddConfig();
    }

    public async Task Delete(Guid id)
    {
        var result = await Http.DeleteAsync("api/Config/" + id);
        if (result.IsSuccessStatusCode)
        {
            ConfigList.Remove(ConfigList.FirstOrDefault(x => x.Id == id));
            toastService.ShowSuccess("Kayıt başarıyla silindi.", "BAŞARILI");

        }
        else
        {
            toastService.ShowError("Kayıt silinemedi.", "HATA");
        }

    }
    public async Task Update()
    {
        var result = await Http.PutAsJsonAsync("api/Config/" + Config.Id, Config);
        if (result.IsSuccessStatusCode)
        {
            ConfigList = await Http.GetFromJsonAsync<List<Config>>("api/Config/AllConfigs");
            Config = new Config();

            toastService.ShowSuccess("Kayıt başarıyla güncellendi.", "BAŞARILI");
        }
        else
        {
            toastService.ShowError("Kayıt güncellenemedi.", "HATA");
        }

    }

}
