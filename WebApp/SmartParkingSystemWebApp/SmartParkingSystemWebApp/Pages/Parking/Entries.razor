@page "/Entries"
@inject HttpClient Http
@inject IToastService toastService
<h1 aria-label="kullanıcılar">Kayıtlar</h1>

<div class="form-group">
    <select @bind="@isLive" class="form-control form-control" placeholder="Type">
        <option key="tum" onclick="@isLive=false">Tüm</option>
        <option key="Canli" onclick="@isLive=true">Canlı</option>

    </select>
    <br />

    <button class="btn btn-outline-success" aria-label="bölge seç" @onclick="selectedTypeChanged">Seç</button>
</div>

@*<div class="form-check form-switch">
    <input class="form-check-input" @bind="@isLive" type="checkbox" role="switch" id="flexSwitchCheckChecked" >
    <label class="form-check-label" for="flexSwitchCheckChecked">Checked switch checkbox input</label>
</div>*@

<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th aria-label="Plaka">Plaka</th>
            <th aria-label="Giriş Saati">Giriş Saati</th>
            <th aria-label="Çıkış Saati">Çıkış Saati</th>
            <th aria-label="Ücret">Ücret</th>
            <th aria-label="Sil">Sil</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in EntryList)
        {
            <tr>
                <td aria-label="@entry.Plate">@entry.Plate</td>
                <td aria-label="@entry.CheckinDate">@entry.CheckinDate</td>
                <td aria-label="@entry.CheckoutDate">@entry.CheckoutDate</td>
                <td aria-label="@entry.Price">@entry.Price</td>
                <td><button class="btn btn-danger" aria-label="Sil" @onclick="() => Delete(entry.Id)">Sil</button></td>
            </tr>
        }
    </tbody>
</table>
<br />
<hr />





@code {
    private List<Entry>
    EntryList = new List<Entry>();
    private List<Entry> currentEntryList  = new List<Entry>();

    public bool isLive{ get; set; }

    private Entry entry = new Entry();

    //[CascadingParameter] public IModalService Modal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        isLive = true;
        var result = await Http.GetFromJsonAsync<List<Entry>>("api/Entry/AllEntries");
        EntryList = result.ToList();
        selectedTypeChanged();



    }

    public async Task AddEntry()
    {
        var result = await Http.PostAsJsonAsync("api/Entry/Add", entry);

        if (result.IsSuccessStatusCode)
        {
            var result2 = await Http.GetFromJsonAsync<List<Entry>>("api/Entry/AllUsers");
            EntryList = result2.ToList();
            entry = new Entry();

            toastService.ShowSuccess("Kaydedildi.", "BAŞARILI");
        }
        else
        {
            toastService.ShowError(" Kayıt zaten mevcut!", "HATA");
        }
    }

    public async Task Delete(Guid id)
    {
        var result = await Http.DeleteAsync("api/Entry/" + id);
        if (result.IsSuccessStatusCode)
        {
            EntryList.Remove(EntryList.FirstOrDefault(x => x.Id == id));
            toastService.ShowSuccess("Kayıt başarıyla silindi.", "BAŞARILI");

        }
        else
        {
            toastService.ShowError("Kayıt silinemedi.", "HATA");
        }

    }
    private void selectedTypeChanged()
    {
        if (isLive == true)
        {
            currentEntryList= EntryList.Where(x => x.CheckoutDate == null).ToList();
        }
        else
        {
            currentEntryList = EntryList;
        }

    }

}
