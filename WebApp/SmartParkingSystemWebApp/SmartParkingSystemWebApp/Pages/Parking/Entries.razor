@page "/Entries"
@inject HttpClient Http
@inject IToastService toastService
@inject IModalService modalService
<h1 aria-label="kullanıcılar">Kayıtlar</h1>
<div class="container">
    <div class="row">
        <div class="col-4">
            <center><p>Kapasite: <b>250</b> </p></center>
        </div>
        <div class="col-4">
            <center>
                <p>Otoparkta Bulunan Araç Sayısı: <b>@count</b></p>
            </center>
        </div>
        <div class="col-4">
            <center><p>Otopark Doluluk Oranı: <b>%@(count*10/25)</b> </p></center>
        </div>
    </div>
</div>

<input type="checkbox" hidden class="btn-check" id="btn-check-outlined"  @bind="isLive"autocomplete="off">
@if (isLive is false)
    cssClass = "btn-outline-primary";
else
    cssClass = "btn-primary";
<label class="btn @cssClass" for="btn-check-outlined">Otoparktaki Araçları Göster</label>


<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th aria-label="Plaka">Plaka</th>
            <th aria-label="Giriş Saati">Giriş Saati</th>
            <th aria-label="Çıkış Saati">Çıkış Saati</th>
            <th aria-label="Ücret">Ücret</th>
            <th aria-label="Durum">Durum</th>
        </tr>
    </thead>
    <tbody>
        @{ selectedTypeChanged(); }
        @foreach (var entry in currentEntryList)
        {
            <tr>
                <td aria-label="@entry.Plate">@entry.Plate</td>
                <td aria-label="@entry.CheckinDate">@entry.CheckinDate</td>
                <td aria-label="@entry.CheckoutDate">@entry.CheckoutDate</td>
                <td aria-label="@entry.Price">@entry.Price</td>
                @if (entry.CheckoutDate is null)
                    status = "Aktif";
                else
                    status = "Pasif";
                <td>@status</td>
            </tr>
        }
    </tbody>
</table>
<br />
<hr />





@code {
    private List<Entry>
    EntryList = new List<Entry>();
    private List<Entry> currentEntryList = new List<Entry>();
    public HubConnection connection { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    public bool isLive { get; set; }
    public string status { get; set; }
    public string cssClass { get; set; }
    public double count { get; set; }


    private Entry entry = new Entry();

    //[CascadingParameter] public IModalService Modal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        isLive = true;
        var result = await Http.GetFromJsonAsync<List<Entry>>("api/Entry/AllEntries");
        EntryList = result.ToList();
        count = EntryList.Where(x => x.CheckoutDate == null).Count();

        //currentEntryList = EntryList;    
        selectedTypeChanged();

        connection = new HubConnectionBuilder().WithUrl("http://localhost:61818/parksishub").Build();
        connection.On<List<Entry>>("recieveMessageEntry", (message) =>
        {
            EntryList = message;
            count = EntryList.Where(x => x.CheckoutDate == null).Count();


            StateHasChanged();
        });
        connection.On<Entry>("recievePlate",  (entry) =>
        {
            if (EntryList.Where(x=>x.CheckoutDate==null).Select(x=>x.Plate.Trim()).ToList().Contains( entry.Plate.Trim()))
            {
                var parameters = new ModalParameters();
                parameters.Add("entry",entry);
                Modal.Show<AddPlate>("Araç Çıkışı",parameters);
            }
            else
            {
                AddEntry(entry.Plate.Trim());
            }

            StateHasChanged();
        });
        await connection.StartAsync();

    }

    //public void Dispose()
    //{
    //    connection.StopAsync();
    //}


    public async Task AddEntry(string plate)
    {
        entry = new Entry();
        entry.Plate = plate;

        var result = await Http.PostAsJsonAsync("api/Entry/AddPlate", plate);

        if (result.IsSuccessStatusCode)
        {
            //var result2 = await Http.GetFromJsonAsync<List<Entry>>("api/Entry/AllUsers");
            //EntryList = result2.ToList();

            toastService.ShowSuccess(plate+" plakalı araç otoparka giriş yaptı.", "BAŞARILI");
        }
        else
        {
            toastService.ShowError(plate + " plakalı araç otoparka giriş yapamadı.", "HATA");
        }
    }

    public async Task Delete(Guid id)
    {
        var result = await Http.DeleteAsync("api/Entry/" + id);
        if (result.IsSuccessStatusCode)
        {
            EntryList.Remove(EntryList.FirstOrDefault(x => x.Id == id));
            toastService.ShowSuccess("Kayıt başarıyla silindi.", "BAŞARILI");

        }
        else
        {
            toastService.ShowError("Kayıt silinemedi.", "HATA");
        }

    }
    private void selectedTypeChanged()
    {
        //bool.TryParse(args.ToString(), out var result);
        //isLive = result;
        if (isLive == true)
        {
            currentEntryList = EntryList.Where(x => x.CheckoutDate == null).ToList();
        }
        else
        {
            currentEntryList = EntryList;
        }

    }
    void OnLeasingChanged(object args)
    {
        bool.TryParse(args.ToString(), out var result);
        isLive = result;
    }

}
