@inject HttpClient Http
@inject IToastService toastService

<div>
    <p>@entry.Plate plakalı araç çıkış yapmak istiyor.</p>
    @*<p>Süre: @diff.TotalHours.ToString() saat.</p>*@
    <p>Ücret: @entry.Price ₺</p>

    <button @onclick="()=>Exit(entry.Plate)" class="btn btn-primary">Onayla</button>
    <button @onclick="Cancel" class="btn btn-secondary">İptal Et</button>
</div>

@code { 
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Entry? entry { get; set; }
    public TimeSpan diff { get; set; }
    //async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    async Task Cancel() => await BlazoredModal.CancelAsync();

    protected override void OnInitialized()
    {
        diff = (TimeSpan)(entry.CheckoutDate - entry.CheckinDate);
    }
    public async Task Exit(string plate)
    {
        var result = await Http.PostAsJsonAsync("api/Entry/AddPlate", plate);

        if (result.IsSuccessStatusCode)
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(true));
            toastService.ShowSuccess(plate + " plakalı araç otoparktan çıkış yaptı.", "BAŞARILI");
        }
        else
        {
            toastService.ShowError(plate + " plakalı araç otoparktan çıkış yapamadı.", "HATA");
        }
    }
}
